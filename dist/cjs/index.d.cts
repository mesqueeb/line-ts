/**
 * https://developers.line.biz/en/docs/line-login/integrate-line-login/#making-an-authorization-request
 */
type LineLoginUrlParams = {
    /**
     * (Optional - default 'code') code. This tells the LINE Platform to return an authorization code.
     */
    response_type?: string;
    /**
     * (Required) Channel ID. Unique identifier for your channel issued by LINE.
     */
    client_id: string;
    /**
     * (Required) Callback URL. URL that users are redirected to after authentication and authorization. Must match one of the the callback URLs registered for your channel in the console.
     */
    redirect_uri: string;
    /**
     * (Optional - default to a random string) A unique alphanumeric string used to prevent cross-site request forgery. This value should be randomly generated by your application. Cannot be a URL-encoded string.
     */
    state?: string;
    /**
     * (Optional - default 'openid') Permissions requested to the user. For more information, see scopes.
     * To obtain the email address of a user, you must first apply for permission.
     * An access token with the profile scope is required to get the friendship status between a user and a LINE Official Account.
     */
    scope?: 'profile' | 'profile%20openid' | 'profile%20openid%20email' | 'openid' | 'openid%20email';
    /**
     * (Optional) A string used to prevent replay attacks. This value is returned in an ID token.
     */
    nonce?: string;
    /**
     * (Optional) consent. Used to force the consent screen to be displayed even if the user has already granted all requested permissions.
     */
    prompt?: string;
    /**
     * (Optional) The allowable elapsed time in seconds since the last time the user was authenticated. Corresponds to the max_age parameter defined in the "Authentication Request" section of OpenID Connect Core 1.0.
     */
    max_age?: number;
    /**
     * (Optional) Display language for LINE Login screens. Specify as one or more RFC 5646 (BCP 47) language tags, separated by spaces, in order of preference. Corresponds to the ui_locales parameter defined in the "Authentication Request" section of OpenID Connect Core 1.0.
     */
    ui_locales?: string;
    /**
     * (Optional) Displays an option to add a LINE Official Account as a friend during login. Set to either normal or aggressive. For more information, see Add a LINE Official Account as a friend when logged in (bot link).
     */
    bot_prompt?: string;
};
/**
 * Get a URL that users can access to login with LINE and be redirected to your app again.
 *
 * LINE documentation: https://developers.line.biz/en/docs/line-login/integrate-line-login/#making-an-authorization-request
 *
 * @param {LineLoginUrlParams} params Only client_id & redirect_uri are required props.
 * @returns {string} the `https://access.line.me/oauth2/v2.1/authorize${query}` URL with correct query
 */
declare function getLineLoginUrl(params: LineLoginUrlParams): string;

type LoginCallbackParamsSuccess = {
    /**
     * Authorization code used to get an access token. Valid for 10 minutes. This authorization code can only be used once.
     */
    code: string;
    /**
     * state parameter included in the authorization URL of original request. Your application should verify that this value matches the one in the original request.
     */
    state: string;
    /**
     * true if the friendship status between the user and the LINE Official Account changes during login. Otherwise, the value is false. This parameter is only returned if the bot_prompt query parameter is specified when making an authorization request and the option to add your LINE Official Account as a friend when the user logged in is displayed. For more information, see Add a LINE Official Account as a friend when logged in (bot link).
     */
    friendship_status_changed?: boolean;
};
type LoginCallbackParamsError = {
    /**
     * (Optional) Error code.
     */
    error: 'access_denied' | string;
    /**
     * (Optional) Details of the error.
     */
    error_description?: string;
    /**
     * (Optional) OAuth 2.0 state value. Required if the authorization Request included the state parameter.
     */
    state?: string;
};
/**
 * Once the user is authenticated and authorization is complete, the HTTP status code 302 and query parameters are returned in the callback URL. This function converts the callback URL to an object with the query parameters.
 *
 * @param {string} callbackUrlTriggered eg. https://client.example.org/cb?code=abcd1234&state=0987poi&friendship_status_changed=true
 * @returns {LoginCallbackParamsSuccess | LoginCallbackParamsError}
 * @example // Success example:
HTTP/1.1 302 Found
Location: https://client.example.org/cb?code=abcd1234&state=0987poi&friendship_status_changed=true
 * @example // Error example:
Location: https://example.com/callback?error=access_denied&error_description=The+resource+owner+denied+the+request.&state=0987poi
 */
declare function getParamsFromLoginCallback(callbackUrlTriggered: string): LoginCallbackParamsSuccess | LoginCallbackParamsError;

export { LineLoginUrlParams, LoginCallbackParamsError, LoginCallbackParamsSuccess, getLineLoginUrl, getParamsFromLoginCallback };
